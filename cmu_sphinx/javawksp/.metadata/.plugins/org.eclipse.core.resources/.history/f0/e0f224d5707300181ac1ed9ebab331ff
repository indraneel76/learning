package com.inda.cmusphinxtest;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;
import edu.cmu.sphinx.api.StreamSpeechRecognizer;
import edu.cmu.sphinx.result.WordResult;

public class TranscriberDemo {       

    public static void main(String[] args) throws Exception {

        Configuration configuration = new Configuration();

      //  configuration.setAcousticModelPath("file:///home/indraneel/learn/cmu_sphinx/javawksp/cmusphinxtest/src/resources/edu/cmu/sphinx/models/en-us/en-us");
      //  configuration.setDictionaryPath("file:///home/indraneel/learn/cmu_sphinx/javawksp/cmusphinxtest/src/resources/edu/cmu/sphinx/models/en-us/cmudict-en-us.dict");
       // configuration.setLanguageModelPath("file:///home/indraneel/learn/cmu_sphinx/javawksp/cmusphinxtest/src/resources/edu/cmu/sphinx/models/en-us/en-us.lm.bin");

//for indian language
     //  configuration.setAcousticModelPath("file:///home/indraneel/learn/cmu_sphinx/cmusphinx-en-in-5.2/en_in.cd_cont_5000");
        
        configuration.setAcousticModelPath("file:///home/indraneel/learn/cmu_sphinx/temp/en-us-adapt");
        configuration.setDictionaryPath("file:///home/indraneel/learn/cmu_sphinx/cmusphinx-en-in-5.2/en_in.dic");
        configuration.setLanguageModelPath("file:///home/indraneel/learn/cmu_sphinx/cmusphinx-en-in-5.2/en-us.lm.bin");

	 
	//live 
	LiveSpeechRecognizer recognizer1 = new LiveSpeechRecognizer(configuration);
	// Start recognition process pruning previously cached data.
	System.out.println("please speak");
	recognizer1.startRecognition(true);
	SpeechResult result1 = recognizer1.getResult();
	
	 while ((result1 = recognizer1.getResult()) != null) {
		    System.out.format("Hypothesis: %s\n", result1.getHypothesis());
		   // for (WordResult r : result1.getWords()) {
		    //    System.out.println(r);
		   // }
	 }
	 
	
	
	
	// Pause recognition process. It can be resumed then with startRecognition(false).
	recognizer1.stopRecognition();
	
	
    }
}